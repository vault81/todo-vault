//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use chrono::NaiveDate;
use sea_orm::{entity::prelude::*, Set};
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "todos")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub text: Option<String>,
    pub done: bool,
    pub due_date: Option<NaiveDate>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Default for Model {
    fn default() -> Self {
        Self {
            id: uuid::Uuid::new_v4(),
            title: "default".to_string(),
            text: None,
            done: false,
            due_date: None,
            created_at: chrono::Utc::now(),
            updated_at: chrono::Utc::now(),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl ActiveModel {
    pub fn new(
        title: String,
        text: Option<String>,
        due_date: Option<Date>,
    ) -> Self {
        Self {
            id: Set(uuid::Uuid::new_v4()),
            title: Set(title),
            text: Set(text),
            due_date: Set(due_date),
            done: Set(false),
            created_at: Set(chrono::Utc::now()),
            updated_at: Set(chrono::Utc::now()),
        }
    }
}

impl Entity {
    pub fn find_by_id(id: uuid::Uuid) -> Select<Entity> {
        Self::find().filter(Column::Id.eq(id))
    }
}
